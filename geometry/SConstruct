#!python
env = Environment(
   CPPFLAGS=['-Wall', '-Wwrite-strings', '-Woverloaded-virtual', '-Wno-sign-compare', '-DS2_USE_EXACTFLOAT', '-DHASH_NAMESPACE=std', '-std=c++11'],
   CPPPATH=['.', 's2'],
)

env.ParseConfig('pkg-config libgflags openssl --cflags-only-I --libs')

BASE_LIB_FILES = [
   'base/int128.cc',
   'base/logging.cc',
   'base/stringprintf.cc',
   'base/strtoint.cc',
]

STRINGS_LIB_FILES = [
   'strings/ascii_ctype.cc',
   'strings/split.cc',
   'strings/stringprintf.cc',
   'strings/strutil.cc',
]

UTIL_CODING_LIB_FILES = [
   'util/coding/coder.cc',
   'util/coding/varint.cc',
]

UTIL_HASH_LIB_FILES = [
   'util/hash/hash.cc',
]

UTIL_MATH_LIB_FILES = [
   'util/math/mathutil.cc',
   'util/math/mathlimits.cc',
   'util/math/exactfloat/exactfloat.cc',
]
libs2cellid = env.SharedLibrary('s2cellid',
   BASE_LIB_FILES +
   STRINGS_LIB_FILES +
   UTIL_CODING_LIB_FILES +
   UTIL_HASH_LIB_FILES +
   UTIL_MATH_LIB_FILES +
   ['s1angle.cc', 's2.cc', 's2cellid.cc', 's2latlng.cc'],
)

libs2 = env.SharedLibrary('s2',
   BASE_LIB_FILES +
   STRINGS_LIB_FILES +
   UTIL_CODING_LIB_FILES +
   UTIL_HASH_LIB_FILES +
   UTIL_MATH_LIB_FILES +
   ['s1interval.cc', 's2cap.cc', 's2cell.cc', 's2cellunion.cc', 's2edgeindex.cc', 's2edgeutil.cc', 's2latlngrect.cc', 's2loop.cc', 's2pointregion.cc', 's2polygon.cc', 's2polygonbuilder.cc', 's2polyline.cc', 's2r2rect.cc', 's2region.cc', 's2regioncoverer.cc', 's2regionintersection.cc', 's2regionunion.cc'],
   LIBS=env.Dictionary('LIBS') + [libs2cellid]
)


env.Install('/usr/include/s2', ['s2/' + x for x in ['r1interval.h', 's1angle.h', 's1interval.h', 's2cap.h', 's2cell.h', 's2cellid.h', 's2cellunion.h', 's2edgeindex.h', 's2edgeutil.h', 's2.h', 's2latlng.h', 's2latlngrect.h', 's2loop.h', 's2pointregion.h', 's2polygonbuilder.h', 's2polygon.h', 's2polyline.h', 's2r2rect.h', 's2regioncoverer.h', 's2region.h', 's2regionintersection.h', 's2regionunion.h', 's2testing.h']])
env.Install('/usr/lib', [libs2, libs2cellid])

env.Alias('install', ['/usr/include', '/usr/lib'])

